name: Deploy to EC2

on:
  push:
    branches: [main, hotfix/url-front]
  workflow_dispatch: # Permite ejecutar manualmente

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REPOSITORY_BACKEND: j2loop/stock-recommender-backend
  REPOSITORY_FRONTEND: j2loop/stock-recommender-frontend

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Generate metadata
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG="${SHORT_SHA}-${TIMESTAMP}"
          
          echo "backend-tag=${TAG}" >> $GITHUB_OUTPUT
          echo "frontend-tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Backend tag: ${TAG}"
          echo "Frontend tag: ${TAG}"

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REPOSITORY_BACKEND }}:${{ steps.meta.outputs.backend-tag }}
            ${{ env.REPOSITORY_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            VITE_API_URL=${{ secrets.EC2_PUBLIC_IP && format('http://{0}:8080/api', secrets.EC2_PUBLIC_IP) || 'http://3.210.158.123:8080/api' }}
          tags: |
            ${{ env.REPOSITORY_FRONTEND }}:${{ steps.meta.outputs.frontend-tag }}
            ${{ env.REPOSITORY_FRONTEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          ssh-keyscan -H $EC2_IP >> ~/.ssh/known_hosts

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Update Ansible inventory with current IP
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          sed -i "s/ansible_host: \".*\"/ansible_host: \"$EC2_IP\"/" ansible/inventory.yml
          sed -i "s/ec2_public_ip: \".*\"/ec2_public_ip: \"$EC2_IP\"/" ansible/inventory.yml

      - name: Update docker-compose with new images
        run: |
          # Create temporary docker-compose file with new image tags
          cat > docker-compose.prod.yml << EOF
          services:
            backend:
              image: ${{ env.REPOSITORY_BACKEND }}:${{ needs.build-and-push.outputs.backend-tag }}
              container_name: stock-recommender-backend
              restart: unless-stopped
              environment:
                - PORT=8080
                - API_URL=\${API_URL:-https://8j5baasof2.execute-api.us-west-2.amazonaws.com}
                - API_KEY=\${API_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdHRlbXB0cyI6MSwiZW1haWwiOiJqdWFuam9sbzEyQGhvdG1haWwuY29tIiwiZXhwIjoxNzUwMTg2MTk2LCJpZCI6IjAiLCJwYXNzd29yZCI6Iicgb3IgMT0xIG9yICcnPScifQ.i3iwFvk5BA5l_AonHDYb4RhEJSZfha3nVsb4ZFvQ7u0}
                - DATABASE_URL=\${DATABASE_URL:-postgresql://juan:M6tDgvlk7GBh0-p0EERpig@stock-recommender-12504.j77.aws-us-east-1.cockroachlabs.cloud:26257/stockmarket?sslmode=verify-full}
              ports:
                - "8080:8080"
              volumes:
                - ./backend/logs:/app/logs
              networks:
                - stock-recommender-network

            frontend:
              image: ${{ env.REPOSITORY_FRONTEND }}:${{ needs.build-and-push.outputs.frontend-tag }}
              container_name: stock-recommender-frontend
              restart: unless-stopped
              environment:
                - NODE_ENV=production
              ports:
                - "3000:3000"
              depends_on:
                - backend
              networks:
                - stock-recommender-network

            nginx:
              image: nginx:alpine
              container_name: stock-recommender-nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                - ./nginx/ssl:/etc/nginx/ssl:ro
              depends_on:
                - frontend
                - backend
              networks:
                - stock-recommender-network

          networks:
            stock-recommender-network:
              driver: bridge
          EOF

      - name: Deploy with Ansible
        run: |
          # Copy the production docker-compose file to the server
          ansible-playbook -i ansible/inventory.yml -e "docker_compose_file=docker-compose.prod.yml" ansible/deploy-playbook.yml

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Test backend health
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          echo "Testing backend health endpoint at http://$EC2_IP:8080/health"
          
          # Wait for services to start
          sleep 30
          
          # Test backend health
          curl -f "http://$EC2_IP:8080/health" || exit 1
          echo "âœ… Backend is healthy"

      - name: Test backend API
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          echo "Testing backend API endpoint at http://$EC2_IP:8080/api/stocks"
          
          # Test API endpoint
          curl -f "http://$EC2_IP:8080/api/stocks" || exit 1
          echo "âœ… Backend API is responding"

      - name: Test frontend
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          echo "Testing frontend at http://$EC2_IP"
          
          # Test frontend
          curl -f -s -o /dev/null "http://$EC2_IP" || exit 1
          echo "âœ… Frontend is accessible"

      - name: Deployment Summary
        run: |
          EC2_IP="${{ secrets.EC2_PUBLIC_IP || '3.210.158.123' }}"
          echo "ðŸŽ‰ Deployment completed successfully!"
          echo "Frontend: http://$EC2_IP"
          echo "Backend API: http://$EC2_IP:8080/api/stocks"
          echo "Backend Health: http://$EC2_IP:8080/health"
          echo "Direct Frontend: http://$EC2_IP:3000"